---
title: "ggplot2_workshop_exercises"
format: html
editor: visual
---

## Goals:

In this exercise you'll practice pairing dplyr verbs and ggplot2 to explore data.

## Directions

### Setup

For this exercise we will be using the "happiness" dataset, which looks at happiness ratings (and a number of other metrics) for various countries over various years.

Load the `tidyverse` library package:

```{r}
library(tidyverse)
```

Import the data using `read_csv()` and assign the imported data to an object named happy:

```{r}

happy <- read_csv("happiness.csv")

```

### Exercise: Data Wrangling

Reproduce the following visualizations following the instructions:

1.  Plot how happiness has changed in the United States over time.

    Step 1: Subset the data using the appropriate dplyr verb to ONLY data from the United States

    Step 2: use geom_line() to plot the data over time.

    Step 3: Add points on top of the lines to make it clear which points we have data for

```{r}
happy |> 
  filter(country_name=="United States") |> 
  ggplot(aes(year, happiness)) +
  geom_line()+
  geom_point()
```

2.  Create a scatterplot showing the relationship between life expectancy and happiness for all countries in all years. all European countries a different color.

```{r}
happy |> 
  ggplot(aes(life_expect,happiness))+
  geom_point()
```

3.   Recreate the figure above but use `col=continent=="Europe"` assign the point color based on whether the data point is for a country in Europe.

    hint: Think carefully about where you put the code and whether it should go inside an `aes()` function.

```{r}
happy |> 
  ggplot(aes(life_expect, happiness))+
  geom_point(aes(col=continent=="Europe"))
```

4.  Make the following adjustments to this bar plot:

-   Adjust the background color using theme_classic() to remove the grey background (find theme

-   Use labs() to change rename the x and y axis. hint: remember you can use a question mark followed by the function (ie. ?labs() ) if you want to look up how to use a function.

-   remove the legend by adding `show.legend = FALSE` within `geom_col()`. Hint: it should NOT go inside the aes function

```{r}
happy |> 
  filter(year==2019, continent=="North America") |> 
  ggplot(aes(reorder(country_name, freedom),freedom))+
  geom_col(aes(fill=country_name=="United States"),show.legend = FALSE)+
  coord_flip()+
  theme_classic()+
  labs(x="Country",y="Freedom score")
  

```
